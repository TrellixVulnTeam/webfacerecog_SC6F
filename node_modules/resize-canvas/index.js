'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _glVec2Add = require('gl-vec2/add');

var _glVec2Add2 = _interopRequireDefault(_glVec2Add);

var _glVec2Subtract = require('gl-vec2/subtract');

var _glVec2Subtract2 = _interopRequireDefault(_glVec2Subtract);

var _glVec2Multiply = require('gl-vec2/multiply');

var _glVec2Multiply2 = _interopRequireDefault(_glVec2Multiply);

var _glVec2Divide = require('gl-vec2/divide');

var _glVec2Divide2 = _interopRequireDefault(_glVec2Divide);

var _copyCanvas = require('copy-canvas');

var _copyCanvas2 = _interopRequireDefault(_copyCanvas);

var _drawToCanvas = require('draw-to-canvas');

var _drawToCanvas2 = _interopRequireDefault(_drawToCanvas);

/**
* resizes the resolutions of an html5 canvas element from a desired position
* perserving the drawn image
 * @param  {canvas} {canvas  an html5 canvas element
 * @param  {array} size      [width, height] to add to the current resolution
 * @param  {array} diff      [width, height] of new resolution
 * @param  {array} from}     [x, y] postion to scale from
 * @return none
 */
function resizeCanvas(_ref) {
  var canvas = _ref.canvas;
  var size = _ref.size;
  var diff = _ref.diff;
  var from = _ref.from;

  var oldSize = [canvas.width, canvas.height];

  if (diff) {
    size = (0, _glVec2Add2['default'])([], oldSize, diff);
  } else {
    diff = (0, _glVec2Subtract2['default'])([], size, oldSize);
  }

  // leave it there isn't a new size or diff
  if (!size || !diff) return;

  // defaults
  from = from || oldSize.map(function (x) {
    return x / 2;
  }); // scale from center by default

  // find where to move drawing to once resized
  var drawOrigin = (0, _glVec2Multiply2['default'])([], (0, _glVec2Divide2['default'])([], from, oldSize), diff);

  // cache image data
  var copy = (0, _copyCanvas2['default'])(canvas);

  // resize size
  canvas.width = size[0];
  canvas.height = size[1];

  // restore image data at proper location
  (0, _drawToCanvas2['default'])(copy, canvas, drawOrigin);
}

exports['default'] = resizeCanvas;
module.exports = exports['default'];

